version: "3.5"

services:


  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

  #Kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    container_name: kafka
    hostname: kafka
    networks:
      - backend-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  #addb
  ad-database:
    image: postgres:10
    container_name: ad-database
    hostname: ad-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: a
      POSTGRES_PASSWORD: a
      POSTGRES_DB: ad
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "a", "-d", "ad"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-a:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  #itemdb
  item-database:
    image: postgres:10
    container_name: item-database
    hostname: item-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: it
      POSTGRES_PASSWORD: it
      POSTGRES_DB: item
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "it", "-d", "item"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-it:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  #statisticdb
  statistic-database:
    image: postgres:10
    container_name: statistic-database
    hostname: statistic-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: st
      POSTGRES_PASSWORD: st
      POSTGRES_DB: statistic
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "st", "-d", "statistic"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-st:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  #messangerdb
  messanger-database:
    image: postgres:10
    container_name: messanger-database
    hostname: messanger-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: me
      POSTGRES_PASSWORD: me
      POSTGRES_DB: messanger
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "me", "-d", "messanger"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-me:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  #userdb
  user-database:
    image: postgres:10
    container_name: user-database
    hostname: user-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
      POSTGRES_DB: user
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "us", "-d", "user"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-us:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  #items service
  items-service:
    container_name: items-service
    image: unige/items-service:latest
    hostname: items-service
    networks:
      - backend-network
    ports:
      - "10080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ITEMDS_CONNECTION_DASH_URL: "jdbc:postgresql://item-database:5432/item"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ITEMDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ITEMDS_USER_DASH_NAME: 'it'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ITEMDS_PASSWORD: 'it'
    networks:
      - backend-network
    depends_on:
      - kafka
      - item-database


  #ad service
  ad-service:
    container_name: ad-service
    image: unige/ad-service:latest
    hostname: ad-service
    networks:
      - backend-network
    ports:
      - "11080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ADDS_CONNECTION_DASH_URL: "jdbc:postgresql://ad-database:5432/ad"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ADDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ADDS_USER_DASH_NAME: 'a'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_ADDS_PASSWORD: 'a'
    networks:
      - backend-network
    depends_on:
      - kafka
      - ad-database

  #user service
  user-service:
    container_name: user-service
    image: unige/user-service:latest
    hostname: user-service
    networks:
      - backend-network
    ports:
      - "12080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERDS_CONNECTION_DASH_URL: "jdbc:postgresql://user-database:5432/user"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERDS_USER_DASH_NAME: 'us'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERDS_PASSWORD: 'us'
    networks:
      - backend-network
    depends_on:
      - kafka
      - user-database
    depends_on:
      - kafka

  #statistic service
  statistic-service:
    container_name: statistic-service
    image: unige/statistic-service:latest
    hostname: statistic-service
    networks:
      - backend-network
    ports:
      - "14080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_STATISTICDS_CONNECTION_DASH_URL: "jdbc:postgresql://statistic-database:5432/statistic"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_STATISTICDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_STATISTICDS_USER_DASH_NAME: 'st'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_STATISTICDS_PASSWORD: 'st'
    networks:
      - backend-network
    depends_on:
      - kafka
      - statistic-database

  #messanger service
  messanger-service:
    container_name: messanger-service
    image: unige/messanger-service:latest
    hostname: messanger-service
    networks:
      - backend-network
    ports:
      - "13080:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_MESSANGERDS_CONNECTION_DASH_URL: "jdbc:postgresql://messanger-database:5432/messanger"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_MESSANGERDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_MESSANGERDS_USER_DASH_NAME: 'me'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_MESSANGERDS_PASSWORD: 'me'
    networks:
      - backend-network
    depends_on:
      - kafka
      - messanger-database

volumes:
  pgdata-it:
  pgdata-a:
  pgdata-us:
  pgdata-st:
  pgdata-me:

networks:
  backend-network:
    driver: bridge
